
i2cLcdDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003fc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000590  08000590  00010590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800059c  0800059c  000105a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800059c  0800059c  000105a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800059c  080005a4  000105a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005a4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005a4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000725  00000000  00000000  000105d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000183  00000000  00000000  00010cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00010e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00010f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000da9f  00000000  00000000  00010f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006c0  00000000  00000000  0001ea07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004edbc  00000000  00000000  0001f0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006de83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000014c  00000000  00000000  0006ded4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000578 	.word	0x08000578

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000578 	.word	0x08000578

080001d4 <tim5_init>:
#define I2C1EN (1<<21)
#define PIN8 8 // pb8
#define PIN9 9 // pb9

// **** TIMER ****
void tim5_init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<3);
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <tim5_init+0x44>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <tim5_init+0x44>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->PSC = 90-1;
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <tim5_init+0x48>)
 80001e6:	2259      	movs	r2, #89	; 0x59
 80001e8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 0xffff;
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <tim5_init+0x48>)
 80001ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001f0:	62da      	str	r2, [r3, #44]	; 0x2c

  // enable counter
	TIM5->CR1 |= (1<<0);
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <tim5_init+0x48>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a09      	ldr	r2, [pc, #36]	; (800021c <tim5_init+0x48>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6013      	str	r3, [r2, #0]
  // wait for update interrupt flag
	while (!(TIM5->SR & (1<<0)));
 80001fe:	bf00      	nop
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <tim5_init+0x48>)
 8000202:	691b      	ldr	r3, [r3, #16]
 8000204:	f003 0301 	and.w	r3, r3, #1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0f9      	beq.n	8000200 <tim5_init+0x2c>
}
 800020c:	bf00      	nop
 800020e:	bf00      	nop
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	40023800 	.word	0x40023800
 800021c:	40000c00 	.word	0x40000c00

08000220 <delayms>:
void delayms(uint16_t ms) {
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++) {
 800022a:	2300      	movs	r3, #0
 800022c:	81fb      	strh	r3, [r7, #14]
 800022e:	e00b      	b.n	8000248 <delayms+0x28>
    TIM5->CNT = 0;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <delayms+0x40>)
 8000232:	2200      	movs	r2, #0
 8000234:	625a      	str	r2, [r3, #36]	; 0x24
    while (TIM5->CNT < 1000);
 8000236:	bf00      	nop
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <delayms+0x40>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000240:	d3fa      	bcc.n	8000238 <delayms+0x18>
	for (uint16_t i=0; i<ms; i++) {
 8000242:	89fb      	ldrh	r3, [r7, #14]
 8000244:	3301      	adds	r3, #1
 8000246:	81fb      	strh	r3, [r7, #14]
 8000248:	89fa      	ldrh	r2, [r7, #14]
 800024a:	88fb      	ldrh	r3, [r7, #6]
 800024c:	429a      	cmp	r2, r3
 800024e:	d3ef      	bcc.n	8000230 <delayms+0x10>
	}
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40000c00 	.word	0x40000c00

08000264 <i2c_init>:

// **** I2C ****
void i2c_init(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  RCC->AHB1ENR = GPIOBEN;
 8000268:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <i2c_init+0x8c>)
 800026a:	2202      	movs	r2, #2
 800026c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->APB1ENR |= I2C1EN;
 800026e:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <i2c_init+0x8c>)
 8000270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000272:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <i2c_init+0x8c>)
 8000274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000278:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER |= (2<<PIN8*2) | (2<<PIN9*2);
 800027a:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <i2c_init+0x90>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a1d      	ldr	r2, [pc, #116]	; (80002f4 <i2c_init+0x90>)
 8000280:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000284:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1<<PIN8) | (1<<PIN9);
 8000286:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <i2c_init+0x90>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <i2c_init+0x90>)
 800028c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000290:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR |= (1<<PIN8*2) | (1<<PIN9*2);
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <i2c_init+0x90>)
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	4a17      	ldr	r2, [pc, #92]	; (80002f4 <i2c_init+0x90>)
 8000298:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800029c:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] |= (4<<0) | (4<<4);
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <i2c_init+0x90>)
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <i2c_init+0x90>)
 80002a4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80002a8:	6253      	str	r3, [r2, #36]	; 0x24

  // under reset state
  I2C1->CR1 |= (1<<15);
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <i2c_init+0x94>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <i2c_init+0x94>)
 80002b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b4:	6013      	str	r3, [r2, #0]
  // not under reset state
  I2C1->CR1 &= ~(1<<15);
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <i2c_init+0x94>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <i2c_init+0x94>)
 80002bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002c0:	6013      	str	r3, [r2, #0]

  // set frequency to 45 MHz
  I2C1->CR2 |= (45<<0);
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <i2c_init+0x94>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <i2c_init+0x94>)
 80002c8:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 80002cc:	6053      	str	r3, [r2, #4]
  // set clock
  I2C1->CCR = 225<<0;
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <i2c_init+0x94>)
 80002d0:	22e1      	movs	r2, #225	; 0xe1
 80002d2:	61da      	str	r2, [r3, #28]
  // set rise time
  I2C1->TRISE = 46;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <i2c_init+0x94>)
 80002d6:	222e      	movs	r2, #46	; 0x2e
 80002d8:	621a      	str	r2, [r3, #32]
  // peripheral enable
  I2C1->CR1 |= (1<<0);
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <i2c_init+0x94>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <i2c_init+0x94>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020400 	.word	0x40020400
 80002f8:	40005400 	.word	0x40005400

080002fc <i2c_burst_write>:

// i2c write supporting multiple bytes
void i2c_burst_write (uint8_t Address, uint8_t *Data, int size) {
 80002fc:	b480      	push	{r7}
 80002fe:	b087      	sub	sp, #28
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
 8000308:	73fb      	strb	r3, [r7, #15]
  // ** start **
  // enable ack
	I2C1->CR1 |= (1<<10);
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <i2c_burst_write+0xac>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a26      	ldr	r2, [pc, #152]	; (80003a8 <i2c_burst_write+0xac>)
 8000310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000314:	6013      	str	r3, [r2, #0]
  // generate start condition
	I2C1->CR1 |= (1<<8);
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <i2c_burst_write+0xac>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a23      	ldr	r2, [pc, #140]	; (80003a8 <i2c_burst_write+0xac>)
 800031c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000320:	6013      	str	r3, [r2, #0]
  // wait until start condition generated
	while (!(I2C1->SR1 & (1<<0)));
 8000322:	bf00      	nop
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <i2c_burst_write+0xac>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <i2c_burst_write+0x28>

  // ** address **
  // send address
	I2C1->DR = Address;
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <i2c_burst_write+0xac>)
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	6113      	str	r3, [r2, #16]
  // wait until address flag set
	while (!(I2C1->SR1 & (1<<1)));
 8000336:	bf00      	nop
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <i2c_burst_write+0xac>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f003 0302 	and.w	r3, r3, #2
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f9      	beq.n	8000338 <i2c_burst_write+0x3c>
  // clear address flag
	uint8_t temp = I2C1->SR1 | I2C1->SR2;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <i2c_burst_write+0xac>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <i2c_burst_write+0xac>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4313      	orrs	r3, r2
 8000352:	74fb      	strb	r3, [r7, #19]
  (void)temp;

  // ** write **
  // loop through all bytes
  for (int i=0; i<size; i++) {
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	e016      	b.n	8000388 <i2c_burst_write+0x8c>
    // wait until data register empty (tx)
    while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 800035a:	bf00      	nop
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <i2c_burst_write+0xac>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <i2c_burst_write+0x60>
    // send data
    I2C1->DR = *Data++;
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	60ba      	str	r2, [r7, #8]
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <i2c_burst_write+0xac>)
 8000372:	611a      	str	r2, [r3, #16]
    // byte transfer finished
    while (!(I2C1->SR1 & (1<<2)));
 8000374:	bf00      	nop
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <i2c_burst_write+0xac>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f003 0304 	and.w	r3, r3, #4
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f9      	beq.n	8000376 <i2c_burst_write+0x7a>
  for (int i=0; i<size; i++) {
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbe4      	blt.n	800035a <i2c_burst_write+0x5e>
  }

  // ** stop **
  // generate stop
	I2C1->CR1 |= (1<<9);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <i2c_burst_write+0xac>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <i2c_burst_write+0xac>)
 8000396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40005400 	.word	0x40005400

080003ac <lcd_cmd>:

void lcd_cmd(char cmd) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	f023 030f 	bic.w	r3, r3, #15
 80003bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	011b      	lsls	r3, r3, #4
 80003c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	f043 030c 	orr.w	r3, r3, #12
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	f043 0308 	orr.w	r3, r3, #8
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	f043 030c 	orr.w	r3, r3, #12
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	f043 0308 	orr.w	r3, r3, #8
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	72fb      	strb	r3, [r7, #11]
	i2c_burst_write(LCDADDR,(uint8_t *) data_t, 4);
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	2204      	movs	r2, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	204e      	movs	r0, #78	; 0x4e
 80003f6:	f7ff ff81 	bl	80002fc <i2c_burst_write>
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <lcd_string>:

void lcd_string(char *str) {
 8000402:	b580      	push	{r7, lr}
 8000404:	b084      	sub	sp, #16
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
	while (*str) {
 800040a:	e028      	b.n	800045e <lcd_string+0x5c>
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (*str&0xf0);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	f023 030f 	bic.w	r3, r3, #15
 8000414:	73fb      	strb	r3, [r7, #15]
    data_l = ((*str++<<4)&0xf0);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	607a      	str	r2, [r7, #4]
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	011b      	lsls	r3, r3, #4
 8000420:	b2db      	uxtb	r3, r3
 8000422:	f023 030f 	bic.w	r3, r3, #15
 8000426:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	f043 030d 	orr.w	r3, r3, #13
 800042e:	b2db      	uxtb	r3, r3
 8000430:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x09;  //en=0, rs=0
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	f043 0309 	orr.w	r3, r3, #9
 8000438:	b2db      	uxtb	r3, r3
 800043a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0D;  //en=1, rs=0
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	f043 030d 	orr.w	r3, r3, #13
 8000442:	b2db      	uxtb	r3, r3
 8000444:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x09;  //en=0, rs=0
 8000446:	7bbb      	ldrb	r3, [r7, #14]
 8000448:	f043 0309 	orr.w	r3, r3, #9
 800044c:	b2db      	uxtb	r3, r3
 800044e:	72fb      	strb	r3, [r7, #11]
    i2c_burst_write(LCDADDR,(uint8_t *) data_t, 4);
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	2204      	movs	r2, #4
 8000456:	4619      	mov	r1, r3
 8000458:	204e      	movs	r0, #78	; 0x4e
 800045a:	f7ff ff4f 	bl	80002fc <i2c_burst_write>
	while (*str) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d1d2      	bne.n	800040c <lcd_string+0xa>
  }
}
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <lcd_init>:

void lcd_init(void) {
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  // initializing by instruction (4 bit)
  // init sequence
	delayms(50);
 8000474:	2032      	movs	r0, #50	; 0x32
 8000476:	f7ff fed3 	bl	8000220 <delayms>
	lcd_cmd(0x30);
 800047a:	2030      	movs	r0, #48	; 0x30
 800047c:	f7ff ff96 	bl	80003ac <lcd_cmd>
	delayms(5);
 8000480:	2005      	movs	r0, #5
 8000482:	f7ff fecd 	bl	8000220 <delayms>
	lcd_cmd(0x30);
 8000486:	2030      	movs	r0, #48	; 0x30
 8000488:	f7ff ff90 	bl	80003ac <lcd_cmd>
	delayms(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff fec7 	bl	8000220 <delayms>
	lcd_cmd(0x30);
 8000492:	2030      	movs	r0, #48	; 0x30
 8000494:	f7ff ff8a 	bl	80003ac <lcd_cmd>

  // display setup
  lcd_cmd(0x20); // 4bit mode
 8000498:	2020      	movs	r0, #32
 800049a:	f7ff ff87 	bl	80003ac <lcd_cmd>
	lcd_cmd(0x28); // 4bit data mode, 2 lines, 15x7 characters
 800049e:	2028      	movs	r0, #40	; 0x28
 80004a0:	f7ff ff84 	bl	80003ac <lcd_cmd>
	lcd_cmd(0x08); // turn display
 80004a4:	2008      	movs	r0, #8
 80004a6:	f7ff ff81 	bl	80003ac <lcd_cmd>
	lcd_cmd(0x01); // clear display, move cursor home
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff ff7e 	bl	80003ac <lcd_cmd>
	lcd_cmd(0x06); // move cursor right
 80004b0:	2006      	movs	r0, #6
 80004b2:	f7ff ff7b 	bl	80003ac <lcd_cmd>
	lcd_cmd(0x0C); // turn display, blink cursor
 80004b6:	200c      	movs	r0, #12
 80004b8:	f7ff ff78 	bl	80003ac <lcd_cmd>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <main>:

// **** MAIN ****
int main () {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	tim5_init();
 80004c4:	f7ff fe86 	bl	80001d4 <tim5_init>
	i2c_init();
 80004c8:	f7ff fecc 	bl	8000264 <i2c_init>
	lcd_init();
 80004cc:	f7ff ffd0 	bl	8000470 <lcd_init>
	lcd_string("gr4bherr");
 80004d0:	4801      	ldr	r0, [pc, #4]	; (80004d8 <main+0x18>)
 80004d2:	f7ff ff96 	bl	8000402 <lcd_string>
	while(1) {}
 80004d6:	e7fe      	b.n	80004d6 <main+0x16>
 80004d8:	08000590 	.word	0x08000590

080004dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050a:	f000 f811 	bl	8000530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff ffd7 	bl	80004c0 <main>

08000512 <LoopForever>:

LoopForever:
  b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   r0, =_estack
 8000514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000520:	080005a4 	.word	0x080005a4
  ldr r2, =_sbss
 8000524:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000528:	2000001c 	.word	0x2000001c

0800052c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <__libc_init_array>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	4d0d      	ldr	r5, [pc, #52]	; (8000568 <__libc_init_array+0x38>)
 8000534:	4c0d      	ldr	r4, [pc, #52]	; (800056c <__libc_init_array+0x3c>)
 8000536:	1b64      	subs	r4, r4, r5
 8000538:	10a4      	asrs	r4, r4, #2
 800053a:	2600      	movs	r6, #0
 800053c:	42a6      	cmp	r6, r4
 800053e:	d109      	bne.n	8000554 <__libc_init_array+0x24>
 8000540:	4d0b      	ldr	r5, [pc, #44]	; (8000570 <__libc_init_array+0x40>)
 8000542:	4c0c      	ldr	r4, [pc, #48]	; (8000574 <__libc_init_array+0x44>)
 8000544:	f000 f818 	bl	8000578 <_init>
 8000548:	1b64      	subs	r4, r4, r5
 800054a:	10a4      	asrs	r4, r4, #2
 800054c:	2600      	movs	r6, #0
 800054e:	42a6      	cmp	r6, r4
 8000550:	d105      	bne.n	800055e <__libc_init_array+0x2e>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f855 3b04 	ldr.w	r3, [r5], #4
 8000558:	4798      	blx	r3
 800055a:	3601      	adds	r6, #1
 800055c:	e7ee      	b.n	800053c <__libc_init_array+0xc>
 800055e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000562:	4798      	blx	r3
 8000564:	3601      	adds	r6, #1
 8000566:	e7f2      	b.n	800054e <__libc_init_array+0x1e>
 8000568:	0800059c 	.word	0x0800059c
 800056c:	0800059c 	.word	0x0800059c
 8000570:	0800059c 	.word	0x0800059c
 8000574:	080005a0 	.word	0x080005a0

08000578 <_init>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr

08000584 <_fini>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr
